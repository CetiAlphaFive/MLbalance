[{"path":"https://cetialphafive.github.io/MLbalance/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jack T. Rametta. Author, maintainer. Sam Fuller. Author.","code":""},{"path":"https://cetialphafive.github.io/MLbalance/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rametta JT, Fuller S (2023). MLbalance: Machine Learning Balance Permutation Tests Experimental Data. R package version 0.1, https://cetialphafive.github.io/MLbalance/.","code":"@Manual{,   title = {MLbalance: Machine Learning Balance Permutation Tests for Experimental Data},   author = {Jack T. Rametta and Sam Fuller},   year = {2023},   note = {R package version 0.1},   url = {https://cetialphafive.github.io/MLbalance/}, }"},{"path":"https://cetialphafive.github.io/MLbalance/index.html","id":"mlbalance-alpha-version-","dir":"","previous_headings":"","what":"Machine Learning Balance Permutation Tests for Experimental Data","title":"Machine Learning Balance Permutation Tests for Experimental Data","text":"MLbalance implements novel machine learning balance test, balance permutation test, experiments binary, multiarm, continuous treatments. purpose test detect failures random assignment imbalance across treatment arms. detail, see Rametta Fuller (2023). package alpha, recommendations comments welcome issues section.","code":""},{"path":"https://cetialphafive.github.io/MLbalance/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Machine Learning Balance Permutation Tests for Experimental Data","text":"can install development version MLbalance GitHub : Future stable versions available CRAN also Github :","code":"# install.packages(\"devtools\") devtools::install_github(\"CetiAlphaFive/MLbalance\") # OR  # install.packages(\"remotes) remotes::install_github(\"CetiAlphaFive/MLbalance\") # OR  # install.packages(\"pak\") pak::pak(\"CetiAlphaFive/MLbalance\") devtools::install_github(\"samjfuller/MLbalance)"},{"path":"https://cetialphafive.github.io/MLbalance/index.html","id":"binary-treatment-example","dir":"","previous_headings":"","what":"Binary Treatment Example","title":"Machine Learning Balance Permutation Tests for Experimental Data","text":"basic example demonstrating balance permutation test simulated binary treatment DGP multidimensional contamation treatment assignment.","code":"# install.packages(\"randomizr\") library(MLbalance) # set.seed(1995) # # Simple simulation  n <- 1000 p <- 20 X <- matrix(rnorm(n*p,0,1),n,p) w_real <- rbinom(n, 1, ifelse(.021 + abs(.4*X[,4] - .5*X[,8]) < 1, .021 + abs(.4*X[,4] - .5*X[,8]), 1)) # install.packages(\"randomizr\") w_sim <- randomizr::complete_ra(N = n,m = sum(w_real)) e <- rnorm(n,0,1) y <- 2*w_real*X[,4] + 3*X[,2] -2*X[,8] + e df <- data.frame(y,w_real,w_sim,X) # r.check <- random_check(W_real = df$w_real, #real treatment assignment vector                          W_sim  = df$w_sim, #simulated vector, comment out this argument to use permutated real assignment vector instead                          X      = subset(df,select = -c(y,w_real,w_sim)) #matrix of pretreatment covariates (or any covariates that SHOULD NOT be related to the assignment process/mechanism              ); r.check$plot #> Simulated Assignemnt Vector Provided, Null Distribution Generated Using Simulated Treatment Assignment. #>  #>  #> Simple Count Table(s) #>  #> W_real #>   0   1  #> 520 480  #> W_sim #>   0   1  #> 520 480  #>  #>  #> Result from difference in variances test (one-sided, greater F-test): #>  #>  Statistic p.val Result #>   139.8141     0   FAIL #>  #>  #> Check diff.var.result in saved output for detailed test result. # to see variables important for predicting assignment, check r.check$imp.predictors"},{"path":"https://cetialphafive.github.io/MLbalance/reference/MLbalance-package.html","id":null,"dir":"Reference","previous_headings":"","what":"MLbalance: Machine Learning Balance Permutation Tests for Experimental Data — MLbalance-package","title":"MLbalance: Machine Learning Balance Permutation Tests for Experimental Data — MLbalance-package","text":"package implements novel machine learning balance test, balance permutation test, experiments binary, multiarm, continuous treatments. purpose test detect failures random assignment imbalance across treatment arms.","code":""},{"path":[]},{"path":"https://cetialphafive.github.io/MLbalance/reference/MLbalance-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MLbalance: Machine Learning Balance Permutation Tests for Experimental Data — MLbalance-package","text":"Maintainer: Jack T. Rametta jtrametta@ucdavis.edu Authors: Sam Fuller sjfuller@ucdavis.edu","code":""},{"path":"https://cetialphafive.github.io/MLbalance/reference/random_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation Balance Test — random_check","title":"Permutation Balance Test — random_check","text":"Permutation Balance Test","code":""},{"path":"https://cetialphafive.github.io/MLbalance/reference/random_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation Balance Test — random_check","text":"","code":"random_check(   W_real,   W_sim = NULL,   X,   R.seed = 1995,   grf.seed = 1995,   breaks = 15 )"},{"path":"https://cetialphafive.github.io/MLbalance/reference/random_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation Balance Test — random_check","text":"W_real Real Treatment Assignment Vector W_sim Simulated Treatment Assignment Vector R.seed Random seed used set.seed grf.seed Random seed used grf's seed breaks number breaks output histogram","code":""},{"path":"https://cetialphafive.github.io/MLbalance/reference/random_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permutation Balance Test — random_check","text":"","code":"n <- 1000 p <- 20 X <- matrix(rnorm(n*p,0,1),n,p) w_real <- rbinom(n, 1, ifelse(.021 + abs(.4*X[,4] - .5*X[,8]) < 1, .021 + abs(.4*X[,4] - .5*X[,8]), 1)) df <- data.frame(w_real,X) r.check <- random_check(W_real = df$w_real, W_sim  = df$w_sim,X = subset(df,select = -w_real)); r.check #> No Simulated Assignemnt Vector Provided, Null Distribution Generated Using Permutated Treatment Assignment. #>  #>  #> Simple Count Table(s) #>  #> W_real #>   0   1  #> 513 487  #> Error in random_check(W_real = df$w_real, W_sim = df$w_sim, X = subset(df,     select = -w_real)): Cannot add <ggproto> objects together #> ℹ Did you forget to add this object to a <ggplot> object? #> Error in eval(expr, envir, enclos): object 'r.check' not found"},{"path":"https://cetialphafive.github.io/MLbalance/reference/vip.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable Importance Function — vip","title":"Variable Importance Function — vip","text":"Variable Importance Function","code":""},{"path":"https://cetialphafive.github.io/MLbalance/reference/vip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable Importance Function — vip","text":"","code":"vip(model)"},{"path":"https://cetialphafive.github.io/MLbalance/reference/vip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable Importance Function — vip","text":"model Trained GRF Model Object","code":""},{"path":"https://cetialphafive.github.io/MLbalance/reference/vip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable Importance Function — vip","text":"","code":"vip(grf_model_object) #> Error in eval(expr, envir, enclos): object 'grf_model_object' not found"}]
